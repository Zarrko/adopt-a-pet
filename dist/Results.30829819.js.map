{"version":3,"sources":["Pet.js","Results.js"],"names":["Pet","props","name","animal","breed","media","location","id","photos","photo","filter","hero","value","React","Component","petfinder","key","secret","Results","search","pet","find","output","then","data","pets","Array","isArray","setState","loading","state","map","breeds","join","contact","city","mapStateToProps"],"mappings":"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","file":"Results.30829819.js","sourceRoot":"../src","sourcesContent":["import React from \"react\";\nimport { Link } from \"@reach/router\";\n\nclass Pet extends React.Component {\n  render() {\n    const { name, animal, breed, media, location, id } = this.props;\n\n    let photos = [];\n\n    if (media && media.photos && media.photos.photo) {\n      photos = media.photos.photo.filter(photo => photo[\"@size\"] === \"pn\");\n    }\n\n    // If Photo doesn't exist\n    const hero = photos[0] ? photos[0].value : \"http://placecorgi.com/300/300\";\n\n    return (\n      <Link to={`/details/${id}`} className=\"pet\">\n        <div className=\"image-container\">\n          <img src={hero} alt={name} />\n        </div>\n        <div className=\"info\">\n          <h1>{name}</h1>\n          <h2>\n            {animal} - {breed} - {location}\n          </h2>\n        </div>\n      </Link>\n    );\n  }\n}\n\nexport default Pet;\n","import React from \"react\";\nimport pf from \"petfinder-client\";\nimport Pet from \"./Pet\";\nimport SearchBox from \"./SearchBox\";\nimport { connect } from \"react-redux\";\n\nconst petfinder = pf({\n  key: process.env.API_KEY,\n  secret: process.env.API_SECRET\n});\n\nclass Results extends React.Component {\n  // Render to DOM first then call componentDidMount\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pets: [],\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n  }\n  search = () => {\n    petfinder.pet\n      .find({\n        output: \"full\",\n        location: this.props.location,\n        animal: this.props.animal,\n        breed: this.props.breed\n      })\n      .then(data => {\n        let pets;\n\n        if (data.petfinder.pets && data.petfinder.pets.pet) {\n          if (Array.isArray(data.petfinder.pets.pet)) {\n            pets = data.petfinder.pets.pet;\n          } else {\n            pets = [data.petfinder.pets.pet];\n          }\n        } else {\n          pets = [];\n        }\n\n        this.setState({\n          pets,\n          loading: true\n        });\n      });\n  };\n  render() {\n    if (this.state.loading === false) {\n      return <h1>Loading All Pets...</h1>;\n    }\n    return (\n      <div className=\"search\">\n        <SearchBox search={this.search} />\n        {this.state.pets.map(pet => {\n          let breed;\n\n          if (Array.isArray(pet.breeds.breed)) {\n            breed = pet.breeds.breed.join(\", \");\n          } else {\n            breed = pet.breeds.breed;\n          }\n          return (\n            <Pet\n              key={pet.id}\n              animal={pet.animal}\n              name={pet.name}\n              breed={breed}\n              media={pet.media}\n              location={`${pet.contact.city}, ${pet.contact.state}`}\n              id={pet.id}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n// Coming from redux\nconst mapStateToProps = ({ location, breed, animal }) => ({\n  location,\n  animal,\n  breed\n});\n\nexport default connect(mapStateToProps)(Results);\n"]}